// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NamenodeClient is the client API for Namenode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NamenodeClient interface {
	// Asigna un jugador a un Datanode (dentro del .go?)
	// rpc AsignarMaquina(AsignarMaqReq) returns (AsignarMaqResp);
	// Llama al datanode para registrar la jugada
	RegistrarJugada(ctx context.Context, in *RegistrarJugReq, opts ...grpc.CallOption) (*RegistrarJugResp, error)
	DevolverJugadasJug(ctx context.Context, in *DevolverJugadasJugReq, opts ...grpc.CallOption) (*DevolverJugadasJugResp, error)
}

type namenodeClient struct {
	cc grpc.ClientConnInterface
}

func NewNamenodeClient(cc grpc.ClientConnInterface) NamenodeClient {
	return &namenodeClient{cc}
}

func (c *namenodeClient) RegistrarJugada(ctx context.Context, in *RegistrarJugReq, opts ...grpc.CallOption) (*RegistrarJugResp, error) {
	out := new(RegistrarJugResp)
	err := c.cc.Invoke(ctx, "/grpc.Namenode/RegistrarJugada", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *namenodeClient) DevolverJugadasJug(ctx context.Context, in *DevolverJugadasJugReq, opts ...grpc.CallOption) (*DevolverJugadasJugResp, error) {
	out := new(DevolverJugadasJugResp)
	err := c.cc.Invoke(ctx, "/grpc.Namenode/DevolverJugadasJug", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NamenodeServer is the server API for Namenode service.
// All implementations must embed UnimplementedNamenodeServer
// for forward compatibility
type NamenodeServer interface {
	// Asigna un jugador a un Datanode (dentro del .go?)
	// rpc AsignarMaquina(AsignarMaqReq) returns (AsignarMaqResp);
	// Llama al datanode para registrar la jugada
	RegistrarJugada(context.Context, *RegistrarJugReq) (*RegistrarJugResp, error)
	DevolverJugadasJug(context.Context, *DevolverJugadasJugReq) (*DevolverJugadasJugResp, error)
	mustEmbedUnimplementedNamenodeServer()
}

// UnimplementedNamenodeServer must be embedded to have forward compatible implementations.
type UnimplementedNamenodeServer struct {
}

func (UnimplementedNamenodeServer) RegistrarJugada(context.Context, *RegistrarJugReq) (*RegistrarJugResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegistrarJugada not implemented")
}
func (UnimplementedNamenodeServer) DevolverJugadasJug(context.Context, *DevolverJugadasJugReq) (*DevolverJugadasJugResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DevolverJugadasJug not implemented")
}
func (UnimplementedNamenodeServer) mustEmbedUnimplementedNamenodeServer() {}

// UnsafeNamenodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NamenodeServer will
// result in compilation errors.
type UnsafeNamenodeServer interface {
	mustEmbedUnimplementedNamenodeServer()
}

func RegisterNamenodeServer(s grpc.ServiceRegistrar, srv NamenodeServer) {
	s.RegisterService(&Namenode_ServiceDesc, srv)
}

func _Namenode_RegistrarJugada_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrarJugReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeServer).RegistrarJugada(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Namenode/RegistrarJugada",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeServer).RegistrarJugada(ctx, req.(*RegistrarJugReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Namenode_DevolverJugadasJug_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DevolverJugadasJugReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NamenodeServer).DevolverJugadasJug(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Namenode/DevolverJugadasJug",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NamenodeServer).DevolverJugadasJug(ctx, req.(*DevolverJugadasJugReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Namenode_ServiceDesc is the grpc.ServiceDesc for Namenode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Namenode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Namenode",
	HandlerType: (*NamenodeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegistrarJugada",
			Handler:    _Namenode_RegistrarJugada_Handler,
		},
		{
			MethodName: "DevolverJugadasJug",
			Handler:    _Namenode_DevolverJugadasJug_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "namenode.proto",
}
